import { Component } from 'react'
import { BarChart } from '../src/barchart'

const barData = [
  {
    "name": "Series A",
    "values": [
      { "x": 1, "y":  91},
      { "x": 2, "y": 290},
      { "x": 3, "y": -25},
    ]
  },
  {  
    "name": "Series B",
    "values": [
      { "x": 1, "y":  9},
      { "x": 2, "y": 49},
      { "x": 3, "y": -20},
    ]
  },
  {  
    "name": "Series C",
    "values": [
      { "x": 1, "y":  14},
      { "x": 2, "y": 77},
      { "x": 3, "y": -70},
    ]
  }
]
const width = 500;
const height = 200;
// stacked 
const stack = d3.layout.stack()
      .offset('zero')
      .x(d => d.x)
      .y(d => d.y)
      .values(d => d.values)
const stackedData = stack(barData)
// xScale
const xDomain = barData[0]['values'].map(d => d.x)
const xScale = d3.scale.ordinal()
                   .domain(xDomain)
                   .rangeRoundBands([0, width], 0.25);
// yScale

// in stacked bar chart, the maximum height we need for
// yScale domain is the sum of y0 + y
const maxYStackedValues = d3.max(stackedData, (d) => (
    d3.max(d['values'], (d2) => (
      // where y0, y is generated by d3.layout.stack()
      d2.y0 + d2.y
    ))
));
const minYStackedValues = d3.min(stackedData, (d) => (
    d3.min(d['values'], (d2) => (
      // where y0, y is generated by d3.layout.stack()
      d2.y0 + d2.y
    ))
  ));

const minYDomain = Math.min(0, minYStackedValues);
const maxYDomain = maxYStackedValues;
const yDomain = [minYDomain, maxYDomain];
const yScale = d3.scale.linear().range([height, 0]).domain(yDomain);

export default class MyBarChart extends Component {
  render() {
    return (
      <BarChart
        data={barData}
        width={width}
        height={height}
        xScale={xScale}
        yScale={yScale}
      />
    )
  }
}